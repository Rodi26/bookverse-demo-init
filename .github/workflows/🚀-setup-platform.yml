name: 'üöÄ Setup Platform'

on:
  workflow_dispatch:
    inputs:
      DEMO_MODE:
        description: 'Enable demo mode (verbose logs, request tracing)'
        required: false
        default: 'false'
        type: choice
        options: ['false', 'true']

env:
  # Centralized environment variables - reduces 30+ lines of repetition
  JFROG_URL: ${{ vars.JFROG_URL }}
  JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  ORG: ${{ github.repository_owner }}

jobs:
  setup-platform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Apply DEMO_MODE settings
        if: ${{ inputs.DEMO_MODE == 'true' || env.DEMO_MODE == 'true' }}
        run: |
          echo "üîî DEMO_MODE enabled"
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV
          echo "HTTP_DEBUG_LEVEL=verbose" >> $GITHUB_ENV
          echo "BASH_XTRACE_ENABLED=1" >> $GITHUB_ENV

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Initialize JFrog Platform
        run: |
          # Configure JFrog CLI for admin access
          jf c add bookverse-admin --url "$JFROG_URL" --access-token "$JFROG_ADMIN_TOKEN" --interactive=false
          jf c use bookverse-admin
          jf c show
          
          # Validate environment and connectivity
          ./.github/scripts/setup/validate_environment.sh

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create Core Infrastructure
        run: |
          # Execute core setup scripts in optimal order
          ./.github/scripts/setup/create_project.sh
          ./.github/scripts/setup/create_stages.sh
          ./.github/scripts/setup/create_repositories.sh

      - name: Setup Users and Applications
        run: |
          # Execute user and application setup
          ./.github/scripts/setup/create_users.sh
          ./.github/scripts/setup/create_applications.sh

      - name: Configure Security Integration
        run: |
          # Configure OIDC integrations for GitHub Actions
          ./.github/scripts/setup/create_oidc.sh

      - name: Setup Evidence Keys
        run: |
          # Generate keys (if not provided), upload trusted key to JFrog, and
          # distribute secrets/variables to service repos
          bash ./.github/scripts/setup/evidence_keys_setup.sh

      - name: Validate Complete Setup
        run: |
          # Final validation of all created resources
          ./.github/scripts/setup/validate_setup.sh

      - name: üìã Setup Platform Summary
        if: always()
        run: |
          echo "## üöÄ Setup Platform Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ **Platform setup completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **BookVerse demo environment is ready**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã What was created:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Get actual created resources details
            echo "#### üéØ **Project & Configuration**" >> $GITHUB_STEP_SUMMARY
            echo "- **Project**: \`bookverse\` with full configuration" >> $GITHUB_STEP_SUMMARY
            echo "- **Lifecycle stages**: \`bookverse-DEV\`, \`bookverse-QA\`, \`bookverse-STAGING\` (+ system PROD)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "#### üì¶ **Repositories Created**" >> $GITHUB_STEP_SUMMARY
            echo "**Service Repositories:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-inventory-python-internal-local\` & \`bookverse-inventory-python-release-local\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-recommendations-python-internal-local\` & \`bookverse-recommendations-python-release-local\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-checkout-python-internal-local\` & \`bookverse-checkout-python-release-local\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-platform-maven-internal-local\` & \`bookverse-platform-maven-release-local\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-helm-helm-internal-local\` & \`bookverse-helm-helm-release-local\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-web-npm-internal-local\` & \`bookverse-web-npm-release-local\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Dependency Repositories:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-pypi-virtual\` (Python: cache + PyPI.org)" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-npm-virtual\` (npm: cache + npmjs.org)" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-dockerhub-virtual\` (Docker: cache + Docker Hub)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "#### üë• **Users Created**" >> $GITHUB_STEP_SUMMARY
            echo "**Management Users:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`alice.developer@bookverse.com\` (Developer)" >> $GITHUB_STEP_SUMMARY
            echo "- \`bob.release@bookverse.com\` (Release Manager, Project Admin)" >> $GITHUB_STEP_SUMMARY
            echo "- \`charlie.devops@bookverse.com\` (DevOps Manager, Project Admin)" >> $GITHUB_STEP_SUMMARY
            echo "- \`diana.architect@bookverse.com\` (Platform Architect, Project Admin)" >> $GITHUB_STEP_SUMMARY
            echo "- \`edward.manager@bookverse.com\` (Engineering Manager, Project Admin)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Service Owners:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`frank.inventory@bookverse.com\` (Inventory Service)" >> $GITHUB_STEP_SUMMARY
            echo "- \`grace.ai@bookverse.com\` (Recommendations Service)" >> $GITHUB_STEP_SUMMARY
            echo "- \`henry.checkout@bookverse.com\` (Checkout Service)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pipeline Users:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`pipeline.inventory@bookverse.com\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`pipeline.recommendations@bookverse.com\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`pipeline.checkout@bookverse.com\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`pipeline.platform@bookverse.com\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "#### üöÄ **Applications** (AppTrust)" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-inventory\` ‚Üí frank.inventory@bookverse.com [high criticality]" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-recommendations\` ‚Üí grace.ai@bookverse.com [medium criticality]" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-checkout\` ‚Üí henry.checkout@bookverse.com [high criticality]" >> $GITHUB_STEP_SUMMARY
            echo "- \`bookverse-platform\` ‚Üí diana.architect@bookverse.com [high criticality]" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "#### üîê **Security & Integration**" >> $GITHUB_STEP_SUMMARY
            echo "**OIDC Integrations:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-bookverse-inventory\` ‚Üí frank.inventory@bookverse.com" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-bookverse-recommendations\` ‚Üí grace.ai@bookverse.com" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-bookverse-checkout\` ‚Üí henry.checkout@bookverse.com" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-bookverse-platform\` ‚Üí diana.architect@bookverse.com" >> $GITHUB_STEP_SUMMARY
            echo "- \`github-bookverse-web\` ‚Üí alice.developer@bookverse.com" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Evidence Keys:**" >> $GITHUB_STEP_SUMMARY
            echo "- Smart conflict resolution implemented" >> $GITHUB_STEP_SUMMARY
            echo "- Keys distributed to all service repositories" >> $GITHUB_STEP_SUMMARY
            echo "- Public key uploaded to JFrog Platform as trusted key" >> $GITHUB_STEP_SUMMARY
            # Resolve key alias using the script default/env rather than grepping logs
            key_alias=${EVIDENCE_KEY_ALIAS:-BookVerse-Evidence-Key}
            echo "- Key alias: \`$key_alias\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üéØ Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. üèóÔ∏è **Run service CI/CD workflows** to build and deploy applications" >> $GITHUB_STEP_SUMMARY
            echo "2. üß™ **Test the demo applications** using the provided endpoints" >> $GITHUB_STEP_SUMMARY
            echo "3. üîç **Explore JFrog Platform** to see created resources" >> $GITHUB_STEP_SUMMARY
            echo "4. üìñ **Check documentation** for detailed usage instructions" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Platform setup failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîç **Check the logs above for error details**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üí° Common causes:" >> $GITHUB_STEP_SUMMARY
            echo "- üîê **Authentication issues** with JFrog platform" >> $GITHUB_STEP_SUMMARY
            echo "- üîí **Insufficient permissions** for admin token" >> $GITHUB_STEP_SUMMARY
            echo "- üåê **Network connectivity** problems" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ö†Ô∏è **Resource conflicts** (project/users already exist)" >> $GITHUB_STEP_SUMMARY
            echo "- üéØ **Missing prerequisites** (GitHub token, environment variables)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß Recommended actions:" >> $GITHUB_STEP_SUMMARY
            echo "1. üîç **Review error logs** for specific failure points" >> $GITHUB_STEP_SUMMARY
            echo "2. üóëÔ∏è **Run Discover Cleanup workflow** to see existing resources" >> $GITHUB_STEP_SUMMARY
            echo "3. üßπ **Clean up conflicts** before retrying setup" >> $GITHUB_STEP_SUMMARY
            echo "4. ‚úÖ **Verify environment variables** and secrets are configured" >> $GITHUB_STEP_SUMMARY
          fi
