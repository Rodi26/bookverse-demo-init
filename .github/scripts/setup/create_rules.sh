#!/usr/bin/env bash

# =============================================================================
# BookVerse Platform - Unified Policy Rules Creation Script
# =============================================================================
#
# This script creates all the unified policy rules with correct predicate types
# that match the actual evidence being generated by the BookVerse platform.
#
# The rules created here will be referenced by the create_policies.sh script
# to create the actual policies.
#
# Authors: BookVerse Platform Team
# Version: 1.0.0
# Last Updated: 2025
#

set -euo pipefail

source "$(dirname "$0")/common.sh"
source "$(dirname "$0")/config.sh"

log_info "🔧 Creating BookVerse Unified Policy Rules..."

# Check required environment variables
check_env_vars JFROG_URL JFROG_ADMIN_TOKEN PROJECT_KEY

API_BASE="$JFROG_URL/unifiedpolicy/api/v1"
AUTH_HEADER="Authorization: Bearer $JFROG_ADMIN_TOKEN"

# Function to create a unified policy rule
create_rule() {
    local name="$1"
    local description="$2"
    local predicate_type="$3"
    local template_id="${4:-1003}"  # Default to evidence template
    
    log_info "Creating rule: $name"
    
    # Check if rule already exists
    local existing_id
    existing_id=$(curl -s -H "$AUTH_HEADER" "$API_BASE/rules" | \
                  jq -r ".items[] | select(.name == \"$name\") | .id" | head -1)
    
    if [[ -n "$existing_id" && "$existing_id" != "null" ]]; then
        log_info "Rule already exists: $name (ID: $existing_id), updating..."
        local rule_data
        rule_data=$(cat <<EOF
{
    "description": "$description",
    "name": "$name",
    "is_custom": true,
    "parameters": [
        {
            "name": "predicateType",
            "value": "$predicate_type"
        }
    ],
    "template_id": "$template_id"
}
EOF
        )
        
        local response
        response=$(curl -s -w "%{http_code}" -X PUT \
            -H "$AUTH_HEADER" \
            -H "Content-Type: application/json" \
            -d "$rule_data" \
            "$API_BASE/rules/$existing_id")
        
        local http_code="${response: -3}"
        local body="${response%???}"
        
        if [[ "$http_code" == "200" ]]; then
            log_success "✅ Updated rule: $name (ID: $existing_id)"
            return 0
        else
            log_error "❌ Failed to update rule: $name (HTTP $http_code)"
            log_debug "Response: $body"
            return 1
        fi
    else
        # Create new rule
        local rule_data
        rule_data=$(cat <<EOF
{
    "description": "$description",
    "name": "$name",
    "is_custom": true,
    "parameters": [
        {
            "name": "predicateType",
            "value": "$predicate_type"
        }
    ],
    "template_id": "$template_id"
}
EOF
        )
        
        local response
        response=$(curl -s -w "%{http_code}" -X POST \
            -H "$AUTH_HEADER" \
            -H "Content-Type: application/json" \
            -d "$rule_data" \
            "$API_BASE/rules")
        
        local http_code="${response: -3}"
        local body="${response%???}"
        
        if [[ "$http_code" == "200" || "$http_code" == "201" ]]; then
            local rule_id
            rule_id=$(echo "$body" | jq -r '.id')
            log_success "✅ Created rule: $name (ID: $rule_id)"
            return 0
        else
            log_error "❌ Failed to create rule: $name (HTTP $http_code)"
            log_debug "Response: $body"
            return 1
        fi
    fi
}

# Create all BookVerse rules with correct predicate types
log_info "📋 Creating BookVerse Unified Policy Rules..."

# DEV Stage Rules
log_section "DEV Stage Rules"

create_rule \
    "BookVerse Atlassian Jira Evidence - DEV Entry" \
    "Requires Atlassian Jira release evidence for DEV stage entry" \
    "https://atlassian.com/evidence/jira/v1"

create_rule \
    "BookVerse SLSA Provenance Evidence - DEV Entry" \
    "Requires SLSA provenance evidence for DEV stage entry" \
    "https://slsa.dev/provenance/v1"

create_rule \
    "BookVerse DEV Entry - Build Quality Gate Required" \
    "Requires SonarQube quality gate evidence attached to build info for DEV stage entry" \
    "https://sonarsource.com/evidence/quality-gate/v1"

create_rule \
    "BookVerse DEV Entry - Docker SAST Evidence Required" \
    "Requires SAST scan evidence attached to Docker images for DEV stage entry" \
    "https://checkmarx.com/evidence/sast/v1.1"

create_rule \
    "BookVerse DEV Entry - Package Unit Test Evidence Required" \
    "Requires unit test results evidence attached to packages for DEV stage entry" \
    "https://pytest.org/evidence/results/v1"

create_rule \
    "BookVerse Smoke Test Evidence - DEV Exit" \
    "Requires smoke test evidence for DEV stage exit" \
    "https://testing.io/evidence/smoke-tests/v1"

# QA Stage Rules
log_section "QA Stage Rules"

create_rule \
    "BookVerse Invicti DAST Evidence - QA Exit" \
    "Requires Invicti DAST scan evidence for QA stage exit" \
    "https://invicti.com/evidence/dast/v3"

create_rule \
    "BookVerse Postman Collection Evidence - QA Exit" \
    "Requires Postman collection test evidence for QA stage exit" \
    "https://postman.com/evidence/collection/v2.2"

# STAGING Stage Rules
log_section "STAGING Stage Rules"

create_rule \
    "BookVerse Cobalt Pentest Evidence - STAGING" \
    "Requires Cobalt penetration testing evidence for STAGING stage exit" \
    "https://cobalt.io/evidence/pentest/v1"

create_rule \
    "BookVerse ServiceNow Change Evidence - STAGING Exit" \
    "Requires ServiceNow change approval evidence for STAGING stage exit" \
    "https://servicenow.com/evidence/release/v1"

create_rule \
    "BookVerse Snyk IaC Evidence - STAGING" \
    "Requires Snyk Infrastructure as Code scan evidence for STAGING stage exit" \
    "https://snyk.io/evidence/iac/v1"

# PROD Stage Rules (Note: PROD is a global stage, not project-prefixed)
log_section "PROD Stage Rules"

create_rule \
    "BookVerse DEV Stage Completion for PROD" \
    "Requires DEV stage completion before PROD release" \
    "https://jfrog.com/evidence/apptrust/gate-certify/v1" \
    "1004"

create_rule \
    "BookVerse QA Stage Completion for PROD" \
    "Requires QA stage completion before PROD release" \
    "https://jfrog.com/evidence/apptrust/gate-certify/v1" \
    "1004"

create_rule \
    "BookVerse STAGING Stage Completion for PROD" \
    "Requires STAGING stage completion before PROD release" \
    "https://jfrog.com/evidence/apptrust/gate-certify/v1" \
    "1004"

# Verify all rules were created
log_section "Rule Verification"
log_info "🔍 Verifying all rules were created..."

rule_count=$(curl -s -H "$AUTH_HEADER" "$API_BASE/rules" | \
             jq '[.items[] | select(.name | startswith("BookVerse"))] | length')

log_info "📊 Total BookVerse rules created: $rule_count"
log_success "✅ BookVerse Unified Policy Rules creation completed!"
